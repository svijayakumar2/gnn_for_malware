import os
import glob
import networkx as nx
import pandas as pd
from networkx.drawing.nx_agraph import read_dot

def log_error(file, error_message):
    with open('error_log.txt', 'a') as log_file:
        log_file.write(f"Failed to process {file}: {error_message}\n")

def extract_fast_graph_features(file):
    features = []
    try:
        # Read the DOT file
        G = read_dot(file)
        # Ensure the graph is a directed graph
        G = nx.DiGraph(G)
        if G.number_of_nodes() == 0:
            raise ValueError("Graph has no nodes")
        # Count self-loops before removing them
        num_self_loops = nx.number_of_selfloops(G)
        # Remove self-loops
        G.remove_edges_from(nx.selfloop_edges(G))
        # Extract fast-to-compute graph features
        num_nodes = G.number_of_nodes()
        num_edges = G.number_of_edges()
        avg_degree = sum(dict(G.degree()).values()) / num_nodes if num_nodes > 0 else 0
        density = nx.density(G)
        # Directed and undirected edges
        num_directed_edges = sum(1 for e in G.edges() if G.has_edge(e[1], e[0]))
        num_undirected_edges = num_edges - num_directed_edges
        features.append({
            'file': file,
            'num_nodes': num_nodes,
            'num_edges': num_edges,
            'avg_degree': avg_degree,
            'density': density,
            'num_self_loops': num_self_loops,
            'num_directed_edges': num_directed_edges,
            'num_undirected_edges': num_undirected_edges
        })
    except Exception as e:
        log_error(file, str(e))
    return features

# Base directory for the files
base_dir = '/data/saranyav/malimg_gnn/exe_files/'

# Get the labels (directories)
labels = [name for name in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, name))]

# Exclude already processed labels

labels = [label for label in labels if not os.path.exists(f'graph_features_fast_{label}.csv')]
print(labels)

for label in labels:
    dir_name = f'{base_dir}/{label}/'
    files = glob.glob(dir_name + '*.exe_cfg')
    all_features = []
    for file in files:
        all_features.extend(extract_fast_graph_features(file))
    # Save the features to a CSV file for this label
    if all_features:
        df = pd.DataFrame(all_features)
        csv_filename = f'graph_features_fast_{label}.csv'
        df.to_csv(csv_filename, index=False)
        print(f"Feature extraction for {label} completed and saved to {csv_filename}")
    else:
        print(f"No valid graph features were extracted for {label}.")
